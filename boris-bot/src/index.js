import React from 'react';
import ReactGA from 'react-ga';
ReactGA.initialize('UA-75890899-2');

import webComponentHarness from '@times-visuals/web-component-harness';
import Heading from '@times-visuals/headline';

import {
  Background,
  Container,
  ButtonContainer,
  BorisImage,
  MoreButton,
} from './style';

import { data } from './data';

export class Root extends React.Component {
  state = {
    text: null,
    value: null,
    answer_text: null,
    answer: null,
    selected: null,
    count: 0,
    score: 0,
    answered: [],
  };

  handleClick = option => {
    const { value, answer_id } = this.state;
    this.setState({ selected: option });
    if (value === option) {
      this.setState({ answer: 'Correct' });
      this.increment(true);

      ReactGA.event({
        category: 'times-boris-bot',
        action: `${answer_id} - correct`,
      });
    } else {
      this.setState({ answer: 'Incorrect' });
      this.increment();

      ReactGA.event({
        category: 'times-boris-bot',
        action: `${answer_id} - incorrect`,
      });
    }
  };

  getRandomText = () => {
    const { answered } = this.state;

    // remove questions that have already been asked
    const answer_to_remove = answered[answered.length - 1];

    if (answered.length !== 0) {
      data.splice(answer_to_remove, 1);
      ReactGA.event({
        category: 'times-boris-bot',
        action: `${answered.length}`,
      });
    }

    const random_index = Math.floor(Math.random() * data.length);
    const item = data[random_index];
    this.setState({
      text: item.text,
      value: item.value,
      answer_text: item.answer_text,
      answer: null,
      selected: null,
      answered: answered.concat(random_index),
      answer_id: item.id,
    });
  };

  increment = (correct = false) => {
    this.setState(({ count }) => ({ count: count + 1 }));
    correct && this.setState(({ score }) => ({ score: score + 1 }));
  };

  componentDidMount() {
    this.getRandomText();

    ReactGA.event({
      category: 'times-boris-bot',
      action: 'pageview',
    });
  }

  render() {
    const {
      text,
      answer,
      count,
      score,
      selected,
      answer_text,
      answered,
    } = this.state;

    return (
      <Background>
        <Container>
          <Heading
            label="Interactive"
            standfirst="Decide if the following are genuine quotes from Boris Johnsonâ€™s Telegraph articles or generated by our robot"
          >
            Who said it: Boris or our Bot?
          </Heading>
          <div className="quotes">
            <img
              src="http://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/quotes.png"
              alt="Quote marks"
            />
          </div>
          <h4>{text}</h4>
          <h5 className={`${answer} ${answer ? '' : 'hidden'}`}>
            {answer_text}
          </h5>
          <ButtonContainer>
            <button
              onClick={() => this.handleClick('Boris')}
              disabled={answer && true}
            >
              <img
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Correct.png"
                alt="Boris Johnson Correct"
                className={`${
                  selected === 'Boris' && answer === 'Correct' ? '' : 'hidden'
                }`}
              />
              <img
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Incorrect.png"
                alt="Boris Johnson Incorrect"
                className={`${
                  selected === 'Boris' && answer === 'Incorrect' ? '' : 'hidden'
                }`}
              />
              <BorisImage
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris.png"
                id="Boris"
                alt="Boris Johnson"
                hover="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Hover.png"
                className={`${
                  selected === 'Boris' && answer
                    ? 'hidden'
                    : answer
                    ? 'unhoverable'
                    : ''
                }`}
              ></BorisImage>
              BORIS
            </button>
            <div className="results">
              {answer ? (
                <React.Fragment>
                  {answer === 'Correct' ? (
                    <img
                      src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/TICK.svg"
                      alt="Tick"
                    />
                  ) : (
                    <img
                      src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/CROSS.svg"
                      alt="Cross"
                    />
                  )}
                  <h2>
                    {score}/{count}
                  </h2>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <img src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/OR.svg" />
                  <h2>
                    {score}/{count}
                  </h2>
                </React.Fragment>
              )}
            </div>
            <button
              onClick={() => this.handleClick('Bot')}
              disabled={answer && true}
            >
              <img
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Correct.png"
                alt="Boris Bot Correct"
                className={`${
                  selected === 'Bot' && answer === 'Correct' ? '' : 'hidden'
                }`}
              />
              <img
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Incorrect.png"
                alt="Boris Bot Incorrect"
                className={`${
                  selected === 'Bot' && answer === 'Incorrect' ? '' : 'hidden'
                }`}
              />
              <BorisImage
                src="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot.png"
                alt="Boris Bot"
                className={`${
                  selected === 'Bot' && answer
                    ? 'hidden'
                    : answer
                    ? 'unhoverable'
                    : ''
                }`}
                hover="https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Hover.png"
              ></BorisImage>
              BOT
            </button>
          </ButtonContainer>
          <MoreButton>
            <button
              className={answer && answered.length !== 50 ? '' : 'hidden'}
              onClick={() => this.getRandomText()}
            >
              PLAY AGAIN
            </button>
          </MoreButton>
        </Container>
      </Background>
    );
  }
}

webComponentHarness(Root, 'times-boris-bot');
