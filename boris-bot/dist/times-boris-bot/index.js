!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("React"),require("ReactDOM"));else if("function"==typeof define&&define.amd)define(["React","ReactDOM"],t);else{var n="object"==typeof exports?t(require("React"),require("ReactDOM")):t(e.React,e.ReactDOM);for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(window,(function(e,t){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=22)}([function(t,n){t.exports=e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"colors",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"breakpoints",{enumerable:!0,get:function(){return o.default}});var r=a(n(20)),o=a(n(21));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=n(13)()},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"createGlobalStyle",(function(){return ot})),n.d(t,"css",(function(){return we})),n.d(t,"isStyledComponent",(function(){return I})),n.d(t,"keyframes",(function(){return it})),n.d(t,"ServerStyleSheet",(function(){return Ve})),n.d(t,"StyleSheetConsumer",(function(){return Ke})),n.d(t,"StyleSheetContext",(function(){return Xe})),n.d(t,"StyleSheetManager",(function(){return Ze})),n.d(t,"ThemeConsumer",(function(){return Ge})),n.d(t,"ThemeContext",(function(){return Fe})),n.d(t,"ThemeProvider",(function(){return Je})),n.d(t,"withTheme",(function(){return st})),n.d(t,"__DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS",(function(){return ct}));var r=n(4),o=n.n(r),a=n(9),i=n.n(a),s=n(0),c=n.n(s),l=n(10),u=n(5),f=n(6),d=(n(2),n(11)),p=n(12),h=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},w=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},O=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},x=function(e){return"object"===(void 0===e?"undefined":m(e))&&e.constructor===Object},S=Object.freeze([]),k=Object.freeze({});function T(e){return"function"==typeof e}function C(e){return e.displayName||e.name||"Component"}function I(e){return e&&"string"==typeof e.styledComponentId}var B=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",E="undefined"!=typeof window&&"HTMLElement"in window,R="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1,j={};var A=function(e){function t(n){g(this,t);for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];var i=O(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(o.length>0?" Additional arguments: "+o.join(", "):"")));return O(i)}return v(t,e),t}(Error),N=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,_=function(e){var t=""+(e||""),n=[];return t.replace(N,(function(e,t,r){return n.push({componentId:t,matchIndex:r}),e})),n.map((function(e,r){var o=e.componentId,a=e.matchIndex,i=n[r+1];return{componentId:o,cssFromDOM:i?t.slice(a,i.matchIndex):t.slice(a)}}))},P=/^\s*\/\/.*$/gm,M=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),W=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),D=[],Y=function(e){if(-2===e){var t=D;return D=[],t}},L=i()((function(e){D.push(e)})),z=void 0,$=void 0,U=void 0,q=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf($)&&n.slice(t-$.length,t)!==$?"."+z:e};W.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf($)>0&&(n[0]=n[0].replace(U,q))},L,Y]),M.use([L,Y]);var H=function(e){return M("",e)};function F(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",o=e.join("").replace(P,""),a=t&&n?n+" "+t+" { "+o+" }":o;return z=r,$=t,U=new RegExp("\\"+$+"\\b","g"),W(n||!t?"":t,a)}var G=function(){return n.nc},J=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},V=function(e,t){e[t]=Object.create(null)},X=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},Z=function(e){if(e.sheet)return e.sheet;for(var t=e.ownerDocument.styleSheets.length,n=0;n<t;n+=1){var r=e.ownerDocument.styleSheets[n];if(r.ownerNode===e)return r}throw new A(10)},Q=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},ee=function(e){return"\n/* sc-component-id: "+e+" */\n"},te=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},ne=function(e,t){return function(n){var r=G();return"<style "+[r&&'nonce="'+r+'"',B+'="'+K(t)+'"','data-styled-version="4.4.0"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},re=function(e,t){return function(){var n,r=((n={})[B]=K(t),n["data-styled-version"]="4.4.0",n),o=G();return o&&(r.nonce=o),c.a.createElement("style",y({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},oe=function(e){return function(){return Object.keys(e)}},ae=function(e,t){return e.createTextNode(ee(t))},ie=function e(t,n){var r=void 0===t?Object.create(null):t,o=void 0===n?Object.create(null):n,a=function(e){var t=o[e];return void 0!==t?t:o[e]=[""]},i=function(){var e="";for(var t in o){var n=o[t][0];n&&(e+=ee(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=y({},e[n]);return t}(r),n=Object.create(null);for(var a in o)n[a]=[o[a][0]];return e(t,n)},css:i,getIds:oe(o),hasNameForId:X(r),insertMarker:a,insertRules:function(e,t,n){a(e)[0]+=t.join(" "),J(r,e,n)},removeRules:function(e){var t=o[e];void 0!==t&&(t[0]="",V(r,e))},sealed:!1,styleTag:null,toElement:re(i,r),toHTML:ne(i,r)}},se=function(e,t,n,r,o){if(E&&!n){var a=function(e,t,n){var r=document;e?r=e.ownerDocument:t&&(r=t.ownerDocument);var o=r.createElement("style");o.setAttribute(B,""),o.setAttribute("data-styled-version","4.4.0");var a=G();if(a&&o.setAttribute("nonce",a),o.appendChild(r.createTextNode("")),e&&!t)e.appendChild(o);else{if(!t||!e||!t.parentNode)throw new A(6);t.parentNode.insertBefore(o,n?t:t.nextSibling)}return o}(e,t,r);return R?function(e,t){var n=Object.create(null),r=Object.create(null),o=void 0!==t,a=!1,i=function(t){var o=r[t];return void 0!==o?o:(r[t]=ae(e.ownerDocument,t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},s=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new A(5)},css:s,getIds:oe(r),hasNameForId:X(n),insertMarker:i,insertRules:function(e,r,s){for(var c=i(e),l=[],u=r.length,f=0;f<u;f+=1){var d=r[f],p=o;if(p&&-1!==d.indexOf("@import"))l.push(d);else{p=!1;var h=f===u-1?"":" ";c.appendData(""+d+h)}}J(n,e,s),o&&l.length>0&&(a=!0,t().insertRules(e+"-import",l))},removeRules:function(i){var s=r[i];if(void 0!==s){var c=ae(e.ownerDocument,i);e.replaceChild(c,s),r[i]=c,V(n,i),o&&a&&t().removeRules(i+"-import")}},sealed:!1,styleTag:e,toElement:re(s,n),toHTML:ne(s,n)}}(a,o):function(e,t){var n=Object.create(null),r=Object.create(null),o=[],a=void 0!==t,i=!1,s=function(e){var t=r[e];return void 0!==t?t:(r[e]=o.length,o.push(0),V(n,e),r[e])},c=function(){var t=Z(e).cssRules,n="";for(var a in r){n+=ee(a);for(var i=r[a],s=te(o,i),c=s-o[i];c<s;c+=1){var l=t[c];void 0!==l&&(n+=l.cssText)}}return n};return{clone:function(){throw new A(5)},css:c,getIds:oe(r),hasNameForId:X(n),insertMarker:s,insertRules:function(r,c,l){for(var u=s(r),f=Z(e),d=te(o,u),p=0,h=[],m=c.length,g=0;g<m;g+=1){var b=c[g],y=a;y&&-1!==b.indexOf("@import")?h.push(b):Q(f,b,d+p)&&(y=!1,p+=1)}a&&h.length>0&&(i=!0,t().insertRules(r+"-import",h)),o[u]+=p,J(n,r,l)},removeRules:function(s){var c=r[s];if(void 0!==c&&!1!==e.isConnected){var l=o[c];!function(e,t,n){for(var r=t-n,o=t;o>r;o-=1)e.deleteRule(o)}(Z(e),te(o,c)-1,l),o[c]=0,V(n,s),a&&i&&t().removeRules(s+"-import")}},sealed:!1,styleTag:e,toElement:re(c,n),toHTML:ne(c,n)}}(a,o)}return ie()},ce=/\s+/,le=void 0;le=E?R?40:1e3:-1;var ue=0,fe=void 0,de=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:E?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];g(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=se(t.target,n?n.styleTag:null,t.forceServer,!0)},ue+=1,this.id=ue,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!E||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+B+'][data-styled-version="4.4.0"]'),o=r.length;if(!o)return this;for(var a=0;a<o;a+=1){var i=r[a];n||(n=!!i.getAttribute("data-styled-streamed"));for(var s,c=(i.getAttribute(B)||"").trim().split(ce),l=c.length,u=0;u<l;u+=1)s=c[u],this.rehydratedNames[s]=!0;t.push.apply(t,_(i.textContent)),e.push(i)}var f=t.length;if(!f)return this;var d=this.makeTag(null);!function(e,t,n){for(var r=0,o=n.length;r<o;r+=1){var a=n[r],i=a.componentId,s=a.cssFromDOM,c=H(s);e.insertRules(i,c)}for(var l=0,u=t.length;l<u;l+=1){var f=t[l];f.parentNode&&f.parentNode.removeChild(f)}}(d,e,t),this.capacity=Math.max(1,le-f),this.tags.push(d);for(var p=0;p<f;p+=1)this.tagMap[t[p].componentId]=d;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];fe=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map((function(e){for(var n=e.getIds(),r=e.clone(),o=0;o<n.length;o+=1)t.tagMap[n[o]]=r;return r})),t.rehydratedNames=y({},this.rehydratedNames),t.deferred=y({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach((function(e){e.sealed=!0}))},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return se(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=le,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,o=0;o<r.length;o+=1)r[o].inject(e,t,n);var a=this.getTagForId(e);if(void 0!==this.deferred[e]){var i=this.deferred[e].concat(t);a.insertRules(e,i,n),this.deferred[e]=void 0}else a.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map((function(e){return e.toHTML()})).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map((function(t,n){var r="sc-"+e+"-"+n;return Object(s.cloneElement)(t.toElement(),{key:r})}))},b(e,null,[{key:"master",get:function(){return fe||(fe=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),pe=function(){function e(t,n){var r=this;g(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new A(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),he=/([A-Z])/g,me=/^ms-/;function ge(e){return e.replace(he,"-$1").toLowerCase().replace(me,"-ms-")}var be=function(e){return null==e||!1===e||""===e},ye=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!be(t[n])){if(x(t[n]))return r.push.apply(r,e(t[n],n)),r;if(T(t[n]))return r.push(ge(n)+":",t[n],";"),r;r.push(ge(n)+": "+(o=n,null==(a=t[n])||"boolean"==typeof a||""===a?"":"number"!=typeof a||0===a||o in l.a?String(a).trim():a+"px")+";")}var o,a;return r})),n?[n+" {"].concat(r,["}"]):r};function ve(e,t,n){if(Array.isArray(e)){for(var r,o=[],a=0,i=e.length;a<i;a+=1)null!==(r=ve(e[a],t,n))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}return be(e)?null:I(e)?"."+e.styledComponentId:T(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:ve(e(t),t,n):e instanceof pe?n?(e.inject(n),e.getName()):e:x(e)?ye(e):e.toString();var s}function we(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return T(e)||x(e)?ve(h(S,[e].concat(n))):ve(h(e,n))}function Oe(e){for(var t,n=0|e.length,r=0|n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var xe=52,Se=function(e){return String.fromCharCode(e+(e>25?39:97))};function ke(e){var t="",n=void 0;for(n=e;n>xe;n=Math.floor(n/xe))t=Se(n%xe)+t;return Se(n%xe)+t}function Te(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!Te(r,t))return!1;if(T(r)&&!I(r))return!1}return!t.some((function(e){return T(e)||function(e){for(var t in e)if(T(e[t]))return!0;return!1}(e)}))}var Ce,Ie=function(e){return ke(Oe(e))},Be=function(){function e(t,n,r){g(this,e),this.rules=t,this.isStatic=Te(t,n),this.componentId=r,de.master.hasId(r)||de.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,o=this.lastClassName;if(E&&n&&"string"==typeof o&&t.hasNameForId(r,o))return o;var a=ve(this.rules,e,t),i=Ie(this.componentId+a.join(""));return t.hasNameForId(r,i)||t.inject(this.componentId,F(a,"."+i,void 0,r),i),this.lastClassName=i,i},e.generateName=function(e){return Ie(e)},e}(),Ee=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme,o=e.theme&&!r?e.theme:t||n.theme;return o},Re=/[[\].#*$><+~=|^:(),"'`-]+/g,je=/(^-|-$)/g;function Ae(e){return e.replace(Re,"-").replace(je,"")}function Ne(e){return"string"==typeof e&&!0}var _e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Pe={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Me=((Ce={})[u.ForwardRef]={$$typeof:!0,render:!0},Ce),We=Object.defineProperty,De=Object.getOwnPropertyNames,Ye=Object.getOwnPropertySymbols,Le=void 0===Ye?function(){return[]}:Ye,ze=Object.getOwnPropertyDescriptor,$e=Object.getPrototypeOf,Ue=Object.prototype,qe=Array.prototype;function He(e,t,n){if("string"!=typeof t){var r=$e(t);r&&r!==Ue&&He(e,r,n);for(var o=qe.concat(De(t),Le(t)),a=Me[e.$$typeof]||_e,i=Me[t.$$typeof]||_e,s=o.length,c=void 0,l=void 0;s--;)if(l=o[s],!(Pe[l]||n&&n[l]||i&&i[l]||a&&a[l])&&(c=ze(t,l)))try{We(e,l,c)}catch(e){}return e}return e}var Fe=Object(s.createContext)(),Ge=Fe.Consumer,Je=function(e){function t(n){g(this,t);var r=O(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}return v(t,e),t.prototype.render=function(){return this.props.children?c.a.createElement(Fe.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return c.a.createElement(Fe.Provider,{value:t},this.props.children)},t.prototype.getTheme=function(e,t){if(T(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":m(e)))throw new A(8);return y({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)},t}(s.Component),Ve=function(){function e(){g(this,e),this.masterSheet=de.master,this.instance=this.masterSheet.clone(),this.sealed=!1}return e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new A(2);return c.a.createElement(Ze,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new A(3)},e}(),Xe=Object(s.createContext)(),Ke=Xe.Consumer,Ze=function(e){function t(n){g(this,t);var r=O(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext),r}return v(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new de(t);throw new A(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return c.a.createElement(Xe.Provider,{value:this.getContext(n,r)},t)},t}(s.Component),Qe={};var et=function(e){function t(){g(this,t);var n=O(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return v(t,e),t.prototype.render=function(){return c.a.createElement(Ke,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:de.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():c.a.createElement(Ge,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,o=(t.displayName,t.foldedComponentIds),a=t.styledComponentId,i=t.target,c=(t.usesTheme,void 0),l=void 0;n.isStatic?c=this.generateAndInjectStyles(k,this.props):(l=Ee(this.props,e,r),c=this.generateAndInjectStyles(l||k,this.props));var u=this.props.as||this.attrs.as||i,f=Ne(u),p={},h=y({},this.props,this.attrs),m=void 0;for(m in h)"forwardedComponent"!==m&&"as"!==m&&("forwardedRef"===m?p.ref=h[m]:"forwardedAs"===m?p.as=h[m]:f&&!Object(d.a)(m)||(p[m]=h[m]));return this.props.style&&this.attrs.style&&(p.style=y({},this.attrs.style,this.props.style)),p.className=Array.prototype.concat(o,a,c!==a?c:null,this.props.className,this.attrs.className).filter(Boolean).join(" "),Object(s.createElement)(u,p)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,o=y({},t,{theme:e});return n.length?(this.attrs={},n.forEach((function(e){var t,n=e,a=!1,i=void 0,s=void 0;for(s in T(n)&&(n=n(o),a=!0),n)i=n[s],a||!T(i)||(t=i)&&t.prototype&&t.prototype.isReactComponent||I(i)||(i=i(o)),r.attrs[s]=i,o[s]=i})),o):o},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,o=n.componentStyle;n.warnTooManyClasses;return o.isStatic&&!r.length?o.generateAndInjectStyles(k,this.styleSheet):o.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(s.Component);function tt(e,t,n){var r=I(e),o=!Ne(e),a=t.displayName,i=void 0===a?function(e){return Ne(e)?"styled."+e:"Styled("+C(e)+")"}(e):a,s=t.componentId,l=void 0===s?function(e,t,n){var r="string"!=typeof t?"sc":Ae(t),o=(Qe[r]||0)+1;Qe[r]=o;var a=r+"-"+e.generateName(r+o);return n?n+"-"+a:a}(Be,t.displayName,t.parentComponentId):s,u=t.ParentComponent,f=void 0===u?et:u,d=t.attrs,h=void 0===d?S:d,m=t.displayName&&t.componentId?Ae(t.displayName)+"-"+t.componentId:t.componentId||l,g=r&&e.attrs?Array.prototype.concat(e.attrs,h).filter(Boolean):h,b=new Be(r?e.componentStyle.rules.concat(n):n,g,m),v=void 0,O=function(e,t){return c.a.createElement(f,y({},e,{forwardedComponent:v,forwardedRef:t}))};return O.displayName=i,(v=c.a.forwardRef(O)).displayName=i,v.attrs=g,v.componentStyle=b,v.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):S,v.styledComponentId=m,v.target=r?e.target:e,v.withComponent=function(e){var r=t.componentId,o=w(t,["componentId"]),a=r&&r+"-"+(Ne(e)?e:Ae(C(e)));return tt(e,y({},o,{attrs:g,componentId:a,ParentComponent:f}),n)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Object(p.a)(e.defaultProps,t):t}}),v.toString=function(){return"."+v.styledComponentId},o&&He(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var nt=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(u.isValidElementType)(n))throw new A(1,String(n));var o=function(){return t(n,r,we.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,y({},r,o))},o.attrs=function(o){return e(t,n,y({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(tt,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){nt[e]=nt(e)}));var rt=function(){function e(t,n){g(this,e),this.rules=t,this.componentId=n,this.isStatic=Te(t,S),de.master.hasId(n)||de.master.deferredInject(n,[])}return e.prototype.createStyles=function(e,t){var n=F(ve(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)},e}();function ot(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=we.apply(void 0,[e].concat(n)),a="sc-global-"+Oe(JSON.stringify(o)),i=new rt(o,a),s=function(e){function t(n){g(this,t);var r=O(this,e.call(this,n)),o=r.constructor,a=o.globalStyle,i=o.styledComponentId;return E&&(window.scCGSHMRCache[i]=(window.scCGSHMRCache[i]||0)+1),r.state={globalStyle:a,styledComponentId:i},r}return v(t,e),t.prototype.componentWillUnmount=function(){window.scCGSHMRCache[this.state.styledComponentId]&&(window.scCGSHMRCache[this.state.styledComponentId]-=1),0===window.scCGSHMRCache[this.state.styledComponentId]&&this.state.globalStyle.removeStyles(this.styleSheet)},t.prototype.render=function(){var e=this;return c.a.createElement(Ke,null,(function(t){e.styleSheet=t||de.master;var n=e.state.globalStyle;return n.isStatic?(n.renderStyles(j,e.styleSheet),null):c.a.createElement(Ge,null,(function(t){var r=e.constructor.defaultProps,o=y({},e.props);return void 0!==t&&(o.theme=Ee(e.props,t,r)),n.renderStyles(o,e.styleSheet),null}))}))},t}(c.a.Component);return s.globalStyle=i,s.styledComponentId=a,s}E&&(window.scCGSHMRCache={});var at=function(e){return e.replace(/\s|\\n/g,"")};function it(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=we.apply(void 0,[e].concat(n)),a=ke(Oe(at(JSON.stringify(o))));return new pe(a,F(o,a,"@keyframes"))}var st=function(e){var t=c.a.forwardRef((function(t,n){return c.a.createElement(Ge,null,(function(r){var o=e.defaultProps,a=Ee(t,r,o);return c.a.createElement(e,y({},t,{theme:a,ref:n}))}))}));return He(t,e),t.displayName="WithTheme("+C(e)+")",t},ct={StyleSheet:de};t.default=nt}.call(this,n(18))},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,o=/: */g,a=/zoo|gra/,i=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,c=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,u=/,\r+?/g,f=/([\t\r\n ])*\f?&/g,d=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,p=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,m=/::(place)/g,g=/:(read-only)/g,b=/\s+(?=[{\];=:>])/g,y=/([[}=:>])\s+/g,v=/(\{[^{]+?);(?=\})/g,w=/\s{2,}/g,O=/([^\(])(:+) */g,x=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,T=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,I=/stretch|:\s*\w+\-(?:conte|avail)/,B=/([^-])(image-set\()/,E="-webkit-",R="-moz-",j="-ms-",A=59,N=125,_=123,P=40,M=41,W=91,D=93,Y=10,L=13,z=9,$=64,U=32,q=38,H=45,F=95,G=42,J=44,V=58,X=39,K=34,Z=47,Q=62,ee=43,te=126,ne=0,re=12,oe=11,ae=107,ie=109,se=115,ce=112,le=111,ue=105,fe=99,de=100,pe=112,he=1,me=1,ge=0,be=1,ye=1,ve=1,we=0,Oe=0,xe=0,Se=[],ke=[],Te=0,Ce=null,Ie=-2,Be=-1,Ee=0,Re=1,je=2,Ae=3,Ne=0,_e=1,Pe="",Me="",We="";function De(e,t,o,a,i){for(var s,c,u=0,f=0,d=0,p=0,b=0,y=0,v=0,w=0,x=0,k=0,T=0,C=0,I=0,B=0,F=0,we=0,ke=0,Ce=0,Ie=0,Be=o.length,Le=Be-1,Fe="",Ge="",Je="",Ve="",Xe="",Ke="";F<Be;){if(v=o.charCodeAt(F),F===Le&&f+p+d+u!==0&&(0!==f&&(v=f===Z?Y:Z),p=d=u=0,Be++,Le++),f+p+d+u===0){if(F===Le&&(we>0&&(Ge=Ge.replace(r,"")),Ge.trim().length>0)){switch(v){case U:case z:case A:case L:case Y:break;default:Ge+=o.charAt(F)}v=A}if(1===ke)switch(v){case _:case N:case A:case K:case X:case P:case M:case J:ke=0;case z:case L:case Y:case U:break;default:for(ke=0,Ie=F,b=v,F--,v=A;Ie<Be;)switch(o.charCodeAt(Ie++)){case Y:case L:case A:++F,v=b,Ie=Be;break;case V:we>0&&(++F,v=b);case _:Ie=Be}}switch(v){case _:for(b=(Ge=Ge.trim()).charCodeAt(0),T=1,Ie=++F;F<Be;){switch(v=o.charCodeAt(F)){case _:T++;break;case N:T--;break;case Z:switch(y=o.charCodeAt(F+1)){case G:case Z:F=He(y,F,Le,o)}break;case W:v++;case P:v++;case K:case X:for(;F++<Le&&o.charCodeAt(F)!==v;);}if(0===T)break;F++}switch(Je=o.substring(Ie,F),b===ne&&(b=(Ge=Ge.replace(n,"").trim()).charCodeAt(0)),b){case $:switch(we>0&&(Ge=Ge.replace(r,"")),y=Ge.charCodeAt(1)){case de:case ie:case se:case H:s=t;break;default:s=Se}if(Ie=(Je=De(t,s,Je,y,i+1)).length,xe>0&&0===Ie&&(Ie=Ge.length),Te>0&&(s=Ye(Se,Ge,Ce),c=qe(Ae,Je,s,t,me,he,Ie,y,i,a),Ge=s.join(""),void 0!==c&&0===(Ie=(Je=c.trim()).length)&&(y=0,Je="")),Ie>0)switch(y){case se:Ge=Ge.replace(S,Ue);case de:case ie:case H:Je=Ge+"{"+Je+"}";break;case ae:Je=(Ge=Ge.replace(h,"$1 $2"+(_e>0?Pe:"")))+"{"+Je+"}",Je=1===ye||2===ye&&$e("@"+Je,3)?"@"+E+Je+"@"+Je:"@"+Je;break;default:Je=Ge+Je,a===pe&&(Ve+=Je,Je="")}else Je="";break;default:Je=De(t,Ye(t,Ge,Ce),Je,a,i+1)}Xe+=Je,C=0,ke=0,B=0,we=0,Ce=0,I=0,Ge="",Je="",v=o.charCodeAt(++F);break;case N:case A:if((Ie=(Ge=(we>0?Ge.replace(r,""):Ge).trim()).length)>1)switch(0===B&&((b=Ge.charCodeAt(0))===H||b>96&&b<123)&&(Ie=(Ge=Ge.replace(" ",":")).length),Te>0&&void 0!==(c=qe(Re,Ge,t,e,me,he,Ve.length,a,i,a))&&0===(Ie=(Ge=c.trim()).length)&&(Ge="\0\0"),b=Ge.charCodeAt(0),y=Ge.charCodeAt(1),b){case ne:break;case $:if(y===ue||y===fe){Ke+=Ge+o.charAt(F);break}default:if(Ge.charCodeAt(Ie-1)===V)break;Ve+=ze(Ge,b,y,Ge.charCodeAt(2))}C=0,ke=0,B=0,we=0,Ce=0,Ge="",v=o.charCodeAt(++F)}}switch(v){case L:case Y:if(f+p+d+u+Oe===0)switch(k){case M:case X:case K:case $:case te:case Q:case G:case ee:case Z:case H:case V:case J:case A:case _:case N:break;default:B>0&&(ke=1)}f===Z?f=0:be+C===0&&a!==ae&&Ge.length>0&&(we=1,Ge+="\0"),Te*Ne>0&&qe(Ee,Ge,t,e,me,he,Ve.length,a,i,a),he=1,me++;break;case A:case N:if(f+p+d+u===0){he++;break}default:switch(he++,Fe=o.charAt(F),v){case z:case U:if(p+u+f===0)switch(w){case J:case V:case z:case U:Fe="";break;default:v!==U&&(Fe=" ")}break;case ne:Fe="\\0";break;case re:Fe="\\f";break;case oe:Fe="\\v";break;case q:p+f+u===0&&be>0&&(Ce=1,we=1,Fe="\f"+Fe);break;case 108:if(p+f+u+ge===0&&B>0)switch(F-B){case 2:w===ce&&o.charCodeAt(F-3)===V&&(ge=w);case 8:x===le&&(ge=x)}break;case V:p+f+u===0&&(B=F);break;case J:f+d+p+u===0&&(we=1,Fe+="\r");break;case K:case X:0===f&&(p=p===v?0:0===p?v:p);break;case W:p+f+d===0&&u++;break;case D:p+f+d===0&&u--;break;case M:p+f+u===0&&d--;break;case P:if(p+f+u===0){if(0===C)switch(2*w+3*x){case 533:break;default:T=0,C=1}d++}break;case $:f+d+p+u+B+I===0&&(I=1);break;case G:case Z:if(p+u+d>0)break;switch(f){case 0:switch(2*v+3*o.charCodeAt(F+1)){case 235:f=Z;break;case 220:Ie=F,f=G}break;case G:v===Z&&w===G&&Ie+2!==F&&(33===o.charCodeAt(Ie+2)&&(Ve+=o.substring(Ie,F+1)),Fe="",f=0)}}if(0===f){if(be+p+u+I===0&&a!==ae&&v!==A)switch(v){case J:case te:case Q:case ee:case M:case P:if(0===C){switch(w){case z:case U:case Y:case L:Fe+="\0";break;default:Fe="\0"+Fe+(v===J?"":"\0")}we=1}else switch(v){case P:B+7===F&&108===w&&(B=0),C=++T;break;case M:0==(C=--T)&&(we=1,Fe+="\0")}break;case z:case U:switch(w){case ne:case _:case N:case A:case J:case re:case z:case U:case Y:case L:break;default:0===C&&(we=1,Fe+="\0")}}Ge+=Fe,v!==U&&v!==z&&(k=v)}}x=w,w=v,F++}if(Ie=Ve.length,xe>0&&0===Ie&&0===Xe.length&&0===t[0].length==0&&(a!==ie||1===t.length&&(be>0?Me:We)===t[0])&&(Ie=t.join(",").length+2),Ie>0){if(s=0===be&&a!==ae?function(e){for(var t,n,o=0,a=e.length,i=Array(a);o<a;++o){for(var s=e[o].split(l),c="",u=0,f=0,d=0,p=0,h=s.length;u<h;++u)if(!(0===(f=(n=s[u]).length)&&h>1)){if(d=c.charCodeAt(c.length-1),p=n.charCodeAt(0),t="",0!==u)switch(d){case G:case te:case Q:case ee:case U:case P:break;default:t=" "}switch(p){case q:n=t+Me;case te:case Q:case ee:case U:case M:case P:break;case W:n=t+n+Me;break;case V:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(ve>0){n=t+n.substring(8,f-1);break}default:(u<1||s[u-1].length<1)&&(n=t+Me+n)}break;case J:t="";default:n=f>1&&n.indexOf(":")>0?t+n.replace(O,"$1"+Me+"$2"):t+n+Me}c+=n}i[o]=c.replace(r,"").trim()}return i}(t):t,Te>0&&void 0!==(c=qe(je,Ve,s,e,me,he,Ie,a,i,a))&&0===(Ve=c).length)return Ke+Ve+Xe;if(Ve=s.join(",")+"{"+Ve+"}",ye*ge!=0){switch(2!==ye||$e(Ve,2)||(ge=0),ge){case le:Ve=Ve.replace(g,":"+R+"$1")+Ve;break;case ce:Ve=Ve.replace(m,"::"+E+"input-$1")+Ve.replace(m,"::"+R+"$1")+Ve.replace(m,":"+j+"input-$1")+Ve}ge=0}}return Ke+Ve+Xe}function Ye(e,t,n){var r=t.trim().split(u),o=r,a=r.length,i=e.length;switch(i){case 0:case 1:for(var s=0,c=0===i?"":e[0]+" ";s<a;++s)o[s]=Le(c,o[s],n,i).trim();break;default:s=0;var l=0;for(o=[];s<a;++s)for(var f=0;f<i;++f)o[l++]=Le(e[f]+" ",r[s],n,i).trim()}return o}function Le(e,t,n,r){var o=t,a=o.charCodeAt(0);switch(a<33&&(a=(o=o.trim()).charCodeAt(0)),a){case q:switch(be+r){case 0:case 1:if(0===e.trim().length)break;default:return o.replace(f,"$1"+e.trim())}break;case V:switch(o.charCodeAt(1)){case 103:if(ve>0&&be>0)return o.replace(d,"$1").replace(f,"$1"+We);break;default:return e.trim()+o.replace(f,"$1"+e.trim())}default:if(n*be>0&&o.indexOf("\f")>0)return o.replace(f,(e.charCodeAt(0)===V?"":"$1")+e.trim())}return e+o}function ze(e,t,n,r){var l,u=0,f=e+";",d=2*t+3*n+4*r;if(944===d)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),o=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*_e){case 0:break;case H:if(110!==e.charCodeAt(10))break;default:var a=o.split((o="",s)),i=0;for(n=0,t=a.length;i<t;n=0,++i){for(var l=a[i],u=l.split(c);l=u[n];){var f=l.charCodeAt(0);if(1===_e&&(f>$&&f<90||f>96&&f<123||f===F||f===H&&l.charCodeAt(1)!==H))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=Pe}}u[n++]=l}o+=(0===i?"":",")+u.join(" ")}}return o=r+o+";",1===ye||2===ye&&$e(o,1)?E+o+o:o}(f);if(0===ye||2===ye&&!$e(f,1))return f;switch(d){case 1015:return 97===f.charCodeAt(10)?E+f+f:f;case 951:return 116===f.charCodeAt(3)?E+f+f:f;case 963:return 110===f.charCodeAt(5)?E+f+f:f;case 1009:if(100!==f.charCodeAt(4))break;case 969:case 942:return E+f+f;case 978:return E+f+R+f+f;case 1019:case 983:return E+f+R+f+j+f+f;case 883:return f.charCodeAt(8)===H?E+f+f:f.indexOf("image-set(",11)>0?f.replace(B,"$1"+E+"$2")+f:f;case 932:if(f.charCodeAt(4)===H)switch(f.charCodeAt(5)){case 103:return E+"box-"+f.replace("-grow","")+E+f+j+f.replace("grow","positive")+f;case 115:return E+f+j+f.replace("shrink","negative")+f;case 98:return E+f+j+f.replace("basis","preferred-size")+f}return E+f+j+f+f;case 964:return E+f+j+"flex-"+f+f;case 1023:if(99!==f.charCodeAt(8))break;return l=f.substring(f.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),E+"box-pack"+l+E+f+j+"flex-pack"+l+f;case 1005:return a.test(f)?f.replace(o,":"+E)+f.replace(o,":"+R)+f:f;case 1e3:switch(u=(l=f.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(u)){case 226:l=f.replace(x,"tb");break;case 232:l=f.replace(x,"tb-rl");break;case 220:l=f.replace(x,"lr");break;default:return f}return E+f+j+l+f;case 1017:if(-1===f.indexOf("sticky",9))return f;case 975:switch(u=(f=e).length-10,d=(l=(33===f.charCodeAt(u)?f.substring(0,u):f).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:f=f.replace(l,E+l)+";"+f;break;case 207:case 102:f=f.replace(l,E+(d>102?"inline-":"")+"box")+";"+f.replace(l,E+l)+";"+f.replace(l,j+l+"box")+";"+f}return f+";";case 938:if(f.charCodeAt(5)===H)switch(f.charCodeAt(6)){case 105:return l=f.replace("-items",""),E+f+E+"box-"+l+j+"flex-"+l+f;case 115:return E+f+j+"flex-item-"+f.replace(T,"")+f;default:return E+f+j+"flex-line-pack"+f.replace("align-content","").replace(T,"")+f}break;case 973:case 989:if(f.charCodeAt(3)!==H||122===f.charCodeAt(4))break;case 931:case 953:if(!0===I.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?ze(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):f.replace(l,E+l)+f.replace(l,R+l.replace("fill-",""))+f;break;case 962:if(f=E+f+(102===f.charCodeAt(5)?j+f:"")+f,n+r===211&&105===f.charCodeAt(13)&&f.indexOf("transform",10)>0)return f.substring(0,f.indexOf(";",27)+1).replace(i,"$1"+E+"$2")+f}return f}function $e(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),o=e.substring(n+1,e.length-1);return Ce(2!==t?r:r.replace(C,"$1"),o,t)}function Ue(e,t){var n=ze(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function qe(e,t,n,r,o,a,i,s,c,l){for(var u,f=0,d=t;f<Te;++f)switch(u=ke[f].call(Ge,e,d,n,r,o,a,i,s,c,l)){case void 0:case!1:case!0:case null:break;default:d=u}if(d!==t)return d}function He(e,t,n,r){for(var o=t+1;o<n;++o)switch(r.charCodeAt(o)){case Z:if(e===G&&r.charCodeAt(o-1)===G&&t+2!==o)return o+1;break;case Y:if(e===Z)return o+1}return o}function Fe(e){for(var t in e){var n=e[t];switch(t){case"keyframe":_e=0|n;break;case"global":ve=0|n;break;case"cascade":be=0|n;break;case"compress":we=0|n;break;case"semicolon":Oe=0|n;break;case"preserve":xe=0|n;break;case"prefix":Ce=null,n?"function"!=typeof n?ye=1:(ye=2,Ce=n):ye=0}}return Fe}function Ge(t,n){if(void 0!==this&&this.constructor===Ge)return e(t);var o=t,a=o.charCodeAt(0);a<33&&(a=(o=o.trim()).charCodeAt(0)),_e>0&&(Pe=o.replace(p,a===W?"":"-")),a=1,1===be?We=o:Me=o;var i,s=[We];Te>0&&void 0!==(i=qe(Be,n,s,s,me,he,0,0,0,0))&&"string"==typeof i&&(n=i);var c=De(Se,s,n,0,0);return Te>0&&void 0!==(i=qe(Ie,c,s,s,me,he,c.length,0,0,0))&&"string"!=typeof(c=i)&&(a=0),Pe="",We="",Me="",ge=0,me=1,he=1,we*a==0?c:c.replace(r,"").replace(b,"").replace(y,"$1").replace(v,"$1").replace(w," ")}return Ge.use=function e(t){switch(t){case void 0:case null:Te=ke.length=0;break;default:if("function"==typeof t)ke[Te++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else Ne=0|!!t}return e},Ge.set=Fe,void 0!==t&&Fe(t),Ge}(null)},function(e,t,n){"use strict";e.exports=n(19)},function(e,t,n){"use strict";function r(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}t.a=function(e,t){var n;void 0===t&&(t=r);var o,a=[],i=!1;return function(){for(var r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];return i&&n===this&&t(r,a)?o:(o=e.apply(this,r),i=!0,n=this,a=r,o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(0)),o=i(n(15)),a=n(16);function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){var n=Object.create(HTMLElement.prototype);n.createdCallback=function(){},n.attachedCallback=function(){o.default.render(r.default.createElement(e,(0,a.processAttributes)(this.attributes)),this)},n.attributeChangedCallback=function(){},n.detachedCallback=function(){},document.registerElement(t,{prototype:n})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Headline=void 0;var r,o=(r=n(0))&&r.__esModule?r:{default:r},a=n(17);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,l(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.children,n=e.label,r=e.standfirst;return o.default.createElement(a.HeadlineContainer,null,n&&o.default.createElement("h3",null,n),t&&o.default.createElement("h1",null,t),r&&o.default.createElement("h2",null,r))}}])&&s(n.prototype,r),i&&s(n,i),t}(o.default.Component);t.Headline=f;var d=f;t.default=d},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,c,l,u,f){switch(n){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=o},function(e,t,n){"use strict";function r(e){return Object.prototype.toString.call(e).slice(8,-1)}function o(e){return"Object"===r(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function a(e){return"Array"===r(e)}function i(e){return"Symbol"===r(e)}function s(e,t,n,r){var o=r.propertyIsEnumerable(t)?"enumerable":"nonenumerable";"enumerable"===o&&(e[t]=n),"nonenumerable"===o&&Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0,configurable:!0})}t.a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,c=e;return o(e)&&e.extensions&&1===Object.keys(e).length&&(c={},r=e.extensions),t.reduce((function(e,t){return function e(t,n,r){if(!o(n))return r&&a(r)&&r.forEach((function(e){n=e(t,n)})),n;var c={};if(o(t)){var l=Object.getOwnPropertyNames(t),u=Object.getOwnPropertySymbols(t);c=l.concat(u).reduce((function(e,r){var o=t[r];return(!i(r)&&!Object.getOwnPropertyNames(n).includes(r)||i(r)&&!Object.getOwnPropertySymbols(n).includes(r))&&s(e,r,o,t),e}),{})}var f=Object.getOwnPropertyNames(n),d=Object.getOwnPropertySymbols(n);return f.concat(d).reduce((function(i,c){var l=n[c],u=o(t)?t[c]:void 0;return r&&a(r)&&r.forEach((function(e){l=e(u,l)})),void 0!==u&&o(l)&&(l=e(u,l,r)),s(i,c,l,n),i}),c)}(e,t,r)}),c)}},function(e,t,n){"use strict";var r=n(14);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,n){e.exports=t},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.processAttributes=void 0;t.processAttributes=function(e){return o(e).reduce((function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},e,r({},t.name.replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()})),t.value))}),{})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeadlineContainer=void 0;var r,o=(r=n(3))&&r.__esModule?r:{default:r},a=n(1);function i(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  width: 100%;\n  text-align: center;\n  margin: 0 1rem;\n  padding: 2rem 0;\n  @media only screen and (min-width: ",'){\n      margin: 0;\n  }\n\n  h1 {\n    font-family: "TimesModern-Bold";\n    font-size: 3rem;\n    color: #1d1d1b;\n    line-height: 3.3rem;\n    margin: auto;\n    ','\n  }\n\n  h2 {\n    font-family: "TimesDigital-Regular";\n    font-size: 1.8rem;\n    color: #7c7c7c;\n    line-height: 2.7rem;\n    ',";\n\n  }\n\n  h3 {\n    text-transform: uppercase;\n    font-size: 1rem;\n    color: #13354e;\n    letter-spacing: 0.12rem;\n    line-height: 1.2rem;\n    font-family: GillSansMTStd-Medium, GillSansW01-Medium;\n    font-weight: 500;\n    padding-bottom: 1rem;\n    ","\n    @media only screen and (min-width: ","){\n        font-size: 1.2rem;\n    }\n  }\n"]);return i=function(){return e},e}var s="\n  font-smoothing: grayscale;\n  -webkit-font-smoothing: grayscale;\n  -moz-osx-font-smoothing: grayscale;\n",c=o.default.div(i(),a.breakpoints.mobile,s,s,s,a.breakpoints.mobile);t.HeadlineContainer=c},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var c,l=[],u=!1,f=-1;function d(){u&&c&&(u=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!u){var e=s(d);u=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||u||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";
/** @license React v16.10.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.fundamental"):60117,v=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case c:case s:case h:return e;default:switch(e=e&&e.$$typeof){case u:case p:case l:return e;default:return t}}case b:case g:case a:return t}}}function x(e){return O(e)===d}t.typeOf=O,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=b,t.Memo=g,t.Portal=a,t.Profiler=c,t.StrictMode=s,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===c||e===s||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===g||e.$$typeof===l||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===v||e.$$typeof===w)},t.isAsyncMode=function(e){return x(e)||O(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return O(e)===u},t.isContextProvider=function(e){return O(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===b},t.isMemo=function(e){return O(e)===g},t.isPortal=function(e){return O(e)===a},t.isProfiler=function(e){return O(e)===c},t.isStrictMode=function(e){return O(e)===s},t.isSuspense=function(e){return O(e)===h}},function(e,t,n){"use strict";var r;function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a={digital:(r={blue:{r:37,g:66,b:81},yellow:{r:224,g:171,b:38},lightBlue:{r:224,g:171,b:38}},o(r,"yellow",{r:128,g:177,b:226}),o(r,"orange",{r:243,g:127,b:47}),o(r,"teal",{r:50,g:146,b:166}),o(r,"purple",{r:108,g:60,b:94}),o(r,"sand",{r:218,g:207,b:193}),r),ukPoliticalParties:{con:{r:64,g:147,b:178},lab:{r:236,g:81,b:86},libdem:{r:246,g:197,b:94},ukip:{r:151,g:103,b:174},snp:{r:255,g:246,b:133},green:{r:97,g:169,b:97},pc:{r:144,g:205,b:124},dup:{r:161,g:82,b:82},sf:{r:68,g:150,b:107},sdlp:{r:125,g:161,b:125},uup:{r:63,g:97,b:124},others:{r:160,g:147,b:143}}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={micro:"400px",small:"520px",mobile:"768px",tablet:"1024px",desktop:"1200px","desktop-wide":"1320px"}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"initialize",(function(){return $})),n.d(r,"ga",(function(){return U})),n.d(r,"set",(function(){return q})),n.d(r,"send",(function(){return H})),n.d(r,"pageview",(function(){return F})),n.d(r,"modalview",(function(){return G})),n.d(r,"timing",(function(){return J})),n.d(r,"event",(function(){return V})),n.d(r,"exception",(function(){return X})),n.d(r,"plugin",(function(){return K})),n.d(r,"outboundLink",(function(){return Z})),n.d(r,"testModeAPI",(function(){return Q})),n.d(r,"default",(function(){return ee}));var o=n(0),a=n.n(o),i=n(2),s=n.n(i);function c(e){console.warn("[react-ga]",e)}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b="_blank",y=1,v=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=this,o=(e=p(t)).call.apply(e,[this].concat(i)),n=!o||"object"!==l(o)&&"function"!=typeof o?h(r):o,g(h(n),"handleClick",(function(e){var r=n.props,o=r.target,a=r.eventLabel,i=r.to,s=r.onClick,c=r.trackerNames,l={label:a},u=o!==b,f=!(e.ctrlKey||e.shiftKey||e.metaKey||e.button===y);u&&f?(e.preventDefault(),t.trackLink(l,(function(){window.location.href=i}),c)):t.trackLink(l,(function(){}),c),s&&s(e)})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.to,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(n,!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},f(e,["to"]),{href:t,onClick:this.handleClick});return this.props.target===b&&(n.rel="noopener noreferrer"),delete n.eventLabel,delete n.trackerNames,a.a.createElement("a",n)}}])&&d(n.prototype,r),o&&d(n,o),t}(o.Component);function w(e){return e.replace(/^\s+|\s+$/g,"")}g(v,"trackLink",(function(){c("ga tracking not enabled")})),g(v,"propTypes",{eventLabel:s.a.string.isRequired,target:s.a.string,to:s.a.string,onClick:s.a.func,trackerNames:s.a.arrayOf(s.a.string)}),g(v,"defaultProps",{target:null,to:null,onClick:null,trackerNames:null});var O=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;var x="REDACTED (Potential Email Address)";function S(e,t){return function(e){return"string"==typeof e&&-1!==e.indexOf("@")}(e)?(c("This arg looks like an email address, redacting."),x):t?w(e).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,(function(e,t,n){return t>0&&t+e.length!==n.length&&e.search(O)>-1&&":"!==n.charAt(t-2)&&("-"!==n.charAt(t+e.length)||"-"===n.charAt(t-1))&&n.charAt(t-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})):e}var k=function(e){var t,n,r,o,a,i,s,c="https://www.google-analytics.com/analytics.js";e&&e.gaAddress?c=e.gaAddress:e&&e.debug&&(c="https://www.google-analytics.com/analytics_debug.js"),t=window,n=document,r="script",o=c,a="ga",t.GoogleAnalyticsObject=a,t.ga=t.ga||function(){(t.ga.q=t.ga.q||[]).push(arguments)},t.ga.l=1*new Date,i=n.createElement(r),s=n.getElementsByTagName(r)[0],i.async=1,i.src=o,s.parentNode.insertBefore(i,s)};function T(e){console.info("[react-ga]",e)}var C=[],I={calls:C,ga:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];C.push([].concat(t))},resetCalls:function(){C.length=0}};function B(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var N="undefined"==typeof window||"undefined"==typeof document,_=!1,P=!0,M=!1,W=!0,D=function(){var e;return M?I.ga.apply(I,arguments):!N&&(window.ga?(e=window).ga.apply(e,arguments):c("ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually"))};function Y(e){return S(e,P)}function L(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=n[0];if("function"==typeof D){if("string"!=typeof o)return void c("ga command must be a string");!W&&Array.isArray(e)||D.apply(void 0,n),Array.isArray(e)&&e.forEach((function(e){D.apply(void 0,A(["".concat(e,".").concat(o)].concat(n.slice(1))))}))}}function z(e,t){e?t&&(t.debug&&!0===t.debug&&(_=!0),!1===t.titleCase&&(P=!1),t.useExistingGa)||(t&&t.gaOptions?D("create",e,t.gaOptions):D("create",e,"auto")):c("gaTrackingID is required in initialize()")}function $(e,t){if(t&&!0===t.testMode)M=!0;else{if(N)return!1;t&&!0===t.standardImplementation||k(t)}return W=!t||"boolean"!=typeof t.alwaysSendToDefaultTracker||t.alwaysSendToDefaultTracker,Array.isArray(e)?e.forEach((function(e){"object"===j(e)?z(e.trackingId,e):c("All configs must be an object")})):z(e,t),!0}function U(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.length>0&&(D.apply(void 0,t),_&&(T("called ga('arguments');"),T("with arguments: ".concat(JSON.stringify(t))))),window.ga}function q(e,t){e?"object"===j(e)?(0===Object.keys(e).length&&c("empty `fieldsObject` given to .set()"),L(t,"set",e),_&&(T("called ga('set', fieldsObject);"),T("with fieldsObject: ".concat(JSON.stringify(e))))):c("Expected `fieldsObject` arg to be an Object"):c("`fieldsObject` is required in .set()")}function H(e,t){L(t,"send",e),_&&(T("called ga('send', fieldObject);"),T("with fieldObject: ".concat(JSON.stringify(e))),T("with trackers: ".concat(JSON.stringify(t))))}function F(e,t,n){if(e){var r=w(e);if(""!==r){var o={};if(n&&(o.title=n),L(t,"send",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(n,!0).forEach((function(t){R(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({hitType:"pageview",page:r},o)),_){T("called ga('send', 'pageview', path);");var a="";n&&(a=" and title: ".concat(n)),T("with path: ".concat(r).concat(a))}}else c("path cannot be an empty string in .pageview()")}else c("path is required in .pageview()")}function G(e,t){if(e){var n,r="/"===(n=w(e)).substring(0,1)?n.substring(1):n;if(""!==r){var o="/modal/".concat(r);L(t,"send","pageview",o),_&&(T("called ga('send', 'pageview', path);"),T("with path: ".concat(o)))}else c("modalName cannot be an empty string or a single / in .modalview()")}else c("modalName is required in .modalview(modalName)")}function J(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.variable,r=e.value,o=e.label,a=arguments.length>1?arguments[1]:void 0;if(t&&n&&r&&"number"==typeof r){var i={hitType:"timing",timingCategory:Y(t),timingVar:Y(n),timingValue:r};o&&(i.timingLabel=Y(o)),H(i,a)}else c("args.category, args.variable AND args.value are required in timing() AND args.value has to be a number")}function V(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.category,n=e.action,r=e.label,o=e.value,a=e.nonInteraction,i=e.transport,s=B(e,["category","action","label","value","nonInteraction","transport"]),l=arguments.length>1?arguments[1]:void 0;if(t&&n){var u={hitType:"event",eventCategory:Y(t),eventAction:Y(n)};r&&(u.eventLabel=Y(r)),void 0!==o&&("number"!=typeof o?c("Expected `args.value` arg to be a Number."):u.eventValue=o),void 0!==a&&("boolean"!=typeof a?c("`args.nonInteraction` must be a boolean."):u.nonInteraction=a),void 0!==i&&("string"!=typeof i?c("`args.transport` must be a string."):(-1===["beacon","xhr","image"].indexOf(i)&&c("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),u.transport=i)),Object.keys(s).filter((function(e){return"dimension"===e.substr(0,"dimension".length)})).forEach((function(e){u[e]=s[e]})),Object.keys(s).filter((function(e){return"metric"===e.substr(0,"metric".length)})).forEach((function(e){u[e]=s[e]})),H(u,l)}else c("args.category AND args.action are required in event()")}function X(e,t){var n=e.description,r=e.fatal,o={hitType:"exception"};n&&(o.exDescription=Y(n)),void 0!==r&&("boolean"!=typeof r?c("`args.fatal` must be a boolean."):o.exFatal=r),H(o,t)}var K={require:function(e,t,n){if(e){var r=w(e);if(""!==r){var o=n?"".concat(n,".require"):"require";if(t){if("object"!==j(t))return void c("Expected `options` arg to be an Object");0===Object.keys(t).length&&c("Empty `options` given to .require()"),U(o,r,t),_&&T("called ga('require', '".concat(r,"', ").concat(JSON.stringify(t)))}else U(o,r),_&&T("called ga('require', '".concat(r,"');"))}else c("`name` cannot be an empty string in .require()")}else c("`name` is required in .require()")},execute:function(e,t){var n,r;if(1==(arguments.length<=2?0:arguments.length-2)?n=arguments.length<=2?void 0:arguments[2]:(r=arguments.length<=2?void 0:arguments[2],n=arguments.length<=3?void 0:arguments[3]),"string"!=typeof e)c("Expected `pluginName` arg to be a String.");else if("string"!=typeof t)c("Expected `action` arg to be a String.");else{var o="".concat(e,":").concat(t);n=n||null,r&&n?(U(o,r,n),_&&(T("called ga('".concat(o,"');")),T('actionType: "'.concat(r,'" with payload: ').concat(JSON.stringify(n))))):n?(U(o,n),_&&(T("called ga('".concat(o,"');")),T("with payload: ".concat(JSON.stringify(n))))):(U(o),_&&T("called ga('".concat(o,"');")))}}};function Z(e,t,n){if("function"==typeof t)if(e&&e.label){var r={hitType:"event",eventCategory:"Outbound",eventAction:"Click",eventLabel:Y(e.label)},o=!1,a=setTimeout((function(){o=!0,t()}),250);r.hitCallback=function(){clearTimeout(a),o||t()},H(r,n)}else c("args.label is required in outboundLink()");else c("hitCallback function is required")}var Q=I,ee={initialize:$,ga:U,set:q,send:H,pageview:F,modalview:G,timing:J,event:V,exception:X,plugin:K,outboundLink:Z,testModeAPI:I};function te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}v.origTrackLink=v.trackLink,v.trackLink=Z;var re=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?te(n,!0).forEach((function(t){ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):te(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},r,{OutboundLink:v}),oe=n(7),ae=n.n(oe),ie=n(8),se=n.n(ie),ce=n(3),le=n(1);function ue(){var e=me(["\n  width: 100%;\n  text-align: center;\n  padding: 2rem;\n\n  button {\n    margin-top: -8rem;\n    border: 1px solid #979797;\n    font-size: 1.8rem;\n    width: 16rem;\n    height: 4rem;\n    color: #979797;\n    background: transparent;\n    font-family: 'Gill Sans';\n\n    &.hidden {\n      // opacity: 0;\n      visibility: hidden;\n    }\n\n    &:hover {\n      border: 1px solid #13354e;\n      cursor: pointer;\n    }\n  }\n"]);return ue=function(){return e},e}function fe(){var e=me(["\n  &:hover:not(.unhoverable) {\n    background: url(",");\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n"]);return fe=function(){return e},e}function de(){var e=me(["\n  display: flex;\n  justify-content: center;\n\n  button {\n    background-color: transparent;\n    margin: 1rem;\n    border: none;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 2.1rem;\n    line-height: 2.4rem;\n    letter-spacing: 1.41px;\n    font-family: 'Gill Sans';\n    color: #000000;\n\n    img {\n      padding-bottom: 1rem;\n\n      &.hidden {\n        display: none;\n      }\n    }\n  }\n\n  .results {\n    width: 150%;\n    @media only screen and (min-width: ",") {\n      width: 50%;\n    }\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    h2 {\n      padding-top: 1rem;\n      font-family: TimesModern-Regular;\n      color: #000000;\n      font-size: 3.6rem;\n      font-weight: 800;\n      line-height: 4rem;\n      text-align: center;\n      letter-spacing: 2.41px;\n      font-weight: normal;\n    }\n  }\n\n  button:hover {\n    // border: 1px solid #13354e;\n    cursor: pointer;\n  }\n\n  button:disabled {\n    border: none;\n  }\n"]);return de=function(){return e},e}function pe(){var e=me(["\n  width: 95%;\n  @media only screen and (max-width: ",") {\n    width: 95%;\n  }\n  @media only screen and (min-width: ",") and (max-width: ",") {\n    max-width: 498px;\n  }\n  @media only screen and (min-width: ",") and (max-width: ",") {\n    max-width: 78.8%;\n  }\n  @media only screen and (min-width: ",") and (max-width: ",") {\n    max-width: 58.333%;\n  }\n  @media only screen and (min-width: ",") {\n    max-width: 665px;\n  }\n  margin: 0 auto;\n\n  h1 {\n    font-size: 3.3rem;\n    padding-bottom: 1.2rem;\n    font-weight: normal;\n  }\n\n  h2 {\n    font-weight: normal;\n    font-family: TimesDigitalW04-Regular !important;\n    font-size: 1.8rem !important;\n    line-height: 2.3rem !important;\n    -webkit-font-smoothing: antialiased;\n\n    @media only screen and (min-width: ",") {\n      font-size: 2rem !important;\n      line-height: 2.5rem !important;\n    }\n  }\n\n  div.quotes {\n    text-align: center;\n    margin: auto;\n  }\n\n  h4 {\n    font-size: 2.7rem;\n    line-height: 2.9rem;\n    font-family: TimesModern-Regular;\n    text-align: center;\n    color: #000000;\n    letter-spacing: 0.14px;\n    padding-bottom: 6rem;\n    font-weight: normal;\n  }\n\n  h5 {\n    text-align: center;\n    font-size: 1.6rem;\n    letter-spacing: 0.14px;\n    line-height: 38px;\n    font-family: 'Gill Sans';\n    font-weight: normal;\n    margin-top: -4rem;\n\n    &.Correct {\n      color: #064789;\n    }\n\n    &.Incorrect {\n      color: #c1272d;\n    }\n\n    &.hidden {\n      visibility: hidden;\n    }\n  }\n\n  .hihDoL {\n    margin: 0;\n  }\n"]);return pe=function(){return e},e}function he(){var e=me(["\n  background-color: #f9f9f9;\n"]);return he=function(){return e},e}function me(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ge=ce.default.div(he()),be=ce.default.div(pe(),le.breakpoints.micro,le.breakpoints.micro,le.breakpoints.mobile,le.breakpoints.mobile,le.breakpoints.tablet,le.breakpoints.tablet,le.breakpoints.desktop,le.breakpoints.desktop,le.breakpoints.mobile),ye=ce.default.div(de(),le.breakpoints.mobile),ve=ce.default.img(fe(),(function(e){return e.hover})),we=ce.default.div(ue()),Oe=[{text:"We should be able to avoid a constitutional humiliation with the EU on October 31",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"1"},{text:"My only argument is that we do not need any more supermarkets",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"2"},{text:"The Italians need to deliver on their promise to reduce greenhouse gas emissions",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"3"},{text:"There are two things to consider, but no one wants to think about whether we want the opposite of what Europe wants",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"4"},{text:"I have no idea what we are but we are not any worse off than our children",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"5"},{text:"We are not going to have a problem with authority, no sir",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"6"},{text:"I am delighted at the progress we are making and believe that we can move our continent forward together",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"7"},{text:"The trouble is that the people who are connected with murder are in Ireland and Northern Ireland",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"8"},{text:"I don't know what is going on",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"9"},{text:"Cuts! We're gonna have cuts! All three parties are now engaged in a competitive slash-fest",value:"Boris",answer_text:"WRITTEN BY BORIS ON SEPTEMBER 21 2009",id:"10"},{text:"You nod off for 10 minutes and you wake up in 200 years' time",value:"Boris",answer_text:"WRITTEN BY BORIS ON SEPTEMBER 7 2009",id:"11"},{text:"What a shower. What a farce. If you wanted final proof of Labour's incompetence, here it is",value:"Boris",answer_text:"WRITTEN BY BORIS ON JUNE 8 2009",id:"12"},{text:"Spending an hour with the FT is like being trapped in a room with assorted members of a millennialist suicide cult",value:"Boris",answer_text:"WRITTEN BY BORIS ON OCTOBER 14 2008",id:"13"},{text:"We all knew Labour was a government of barbarians",value:"Boris",answer_text:"WRITTEN BY BORIS ON FEBRUARY 10 2005",id:"14"},{text:"The Iranian ambassador is an immensely distinguished-looking fellow",value:"Boris",answer_text:"WRITTEN BY BORIS ON JUNE 24 2004",id:"15"},{text:"You see, if you were an ancient Athenian politician and you went bald, things were so much easier",value:"Boris",answer_text:"WRITTEN BY BORIS ON JULY 8 2004",id:"16"},{text:"Go out in to the street and look at your fellow human beings",value:"Boris",answer_text:"WRITTEN BY BORIS ON SEPTEMBER 30 2004",id:"17"},{text:"Goggles for conkers! Ha ha ha. Ho ho ho",value:"Boris",answer_text:"WRITTEN BY BORIS ON OCTOBER 7 2004",id:"18"},{text:"My mobile has been throbbing for the past hour with calls from the nice telly people wanting me to go on and gloat about the extinction of David Blunkett",value:"Boris",answer_text:"WRITTEN BY BORIS ON DECEMBER 16 2004",id:"19"},{text:"The rain was coursing down the window panes and your columnist was flat on his back, riffling the leaves of the paper with his snores",value:"Boris",answer_text:"WRITTEN BY BORIS ON NOVEMBER 11 2008",id:"20"},{text:"The Chequers deal is really well liked in London",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"21"},{text:"I know all there is to know about every political contest this decade",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"22"},{text:"It is a choice between the exciting export market, the process of the bureaucracy and the problems of the EU",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"23"},{text:"We are leaving the EU with a deal to ensure that the relationship gives both sides something to grasp on to",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"24"},{text:"Now is the time to unite and move forward together",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"25"},{text:"It is about the brain of the world, it’s in need of medicine and we are all kinds of medicine",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"26"},{text:"We need to go back to Brussels. Think of the spectrum of opportunity — there is a huge prospect for the country",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"27"},{text:"Sometimes I believe that there is no point in the banks?",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"28"},{text:"When it comes to education the parents swallow the burden of the state",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"29"},{text:"Yes, our best is in the past that is for sure but our past is not our best",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"30"},{text:"There should be another way, but I have been kicked around by the rest of the project",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"31"},{text:"We have made the most successful and most important pledge",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"32"},{text:"In my educational history can you see the story of the modern British student?",value:"Bot",answer_text:"WRITTEN BY OUR BORIS BOT",id:"33"},{text:"The feelings being manifested outside my house are shared by the large numbers of people",value:"Boris",answer_text:"WRITTEN BY BORIS ON JULY 3 2016",id:"34"},{text:"The Danes had also got up early for exercise – and they were diving stark naked into the bracing waters of the harbour",value:"Boris",answer_text:"WRITTEN BY BORIS ON AUGUST 5 2018",id:"35"},{text:"We are a satellite state – a memento mori fixed on the walls of Brussels as a ghastly gaping warning to all who try to escape",value:"Boris",answer_text:"WRITTEN BY BORIS ON NOVEMBER 25 2018",id:"36"},{text:"I don’t want some double-barrelled activist telling me that air travel is only to be used in emergencies",value:"Boris",answer_text:"WRITTEN BY BORIS ON APRIL 21 2019",id:"37"},{text:"The French will demand more of our fish",value:"Boris",answer_text:"WRITTEN BY BORIS ON DECEMBER 2 2018",id:"38"},{text:"Surely this is the time for the protesters to take their pink boat to Tiananmen Square",value:"Boris",answer_text:"WRITTEN BY BORIS ON APRIL 21 2019",id:"39"},{text:"A decision had been taken to abandon us in our misty island like a bunch of woad-painted savages",value:"Boris",answer_text:"WRITTEN BY BORIS ON DECMEBER 12 2011",id:"40"},{text:"We were so poor that British athletes were asked to make their own shorts and to train on the beach at Butlins",value:"Boris",answer_text:"WRITTEN BY BORIS ON DECEMBER 26 2011",id:"41"},{text:"There it was, slap bang in the middle of the road. It was a giant cat",value:"Boris",answer_text:"WRITTEN BY BORIS ON NOVEMBER 26 2011",id:"42"},{text:"Never mind the badgers – save the Cleggster from extermination!",value:"Boris",answer_text:"WRITTEN BY BORIS ON SEPTEMBER 24 2012",id:"43"},{text:"Dig out this shale gas, they warn, and our water will be poisoned and our children will be stunted and our cattle will be victims of terrible intestinal explosions",value:"Boris",answer_text:"WRITTEN BY BORIS ON DECEMBER 9 2012",id:"44"},{text:"I once said the Serbs were not all bad",value:"Boris",answer_text:"WRITTEN BY BORIS ON SEPTEMBER 17 2012",id:"45"},{text:"Perhaps we could stage a pagan ritual at Stonehenge, involving either the sacrifice of maidens, or a goat, or a rabbit, or maybe just a worm",value:"Boris",answer_text:"WRITTEN BY BORIS ON JULY 16 2012",id:"46"},{text:"I was ushered into his lair and found the ancient autocrat on a sofa, surrounded by statuesque blondes of possibly Ukrainian extraction",value:"Boris",answer_text:"WRITTEN BY BORIS ON MAY 7 2012",id:"47"},{text:"I don’t know what it is about the Japanese – a lot of raw fish in the diet perhaps – but they do live to prodigious ages",value:"Boris",answer_text:"WRITTEN BY BORIS ON OCTOBER 29 2018",id:"48"},{text:"Everything is online, a great charnel-house of porn and piffle",value:"Boris",answer_text:"WRITTEN BY BORIS ON MARCH 11 2012",id:"49"},{text:"It is sometimes said of the modern Tory party that it has become a little bit vanilla",value:"Boris",answer_text:"WRITTEN BY BORIS ON MARCH 17 2009",id:"50"}];function xe(e){return(xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Te(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ce(e,t){return(Ce=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"Root",(function(){return Be})),re.initialize("UA-75890899-2");var Be=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=this,o=(e=ke(t)).call.apply(e,[this].concat(i)),n=!o||"object"!==xe(o)&&"function"!=typeof o?Te(r):o,Ie(Te(n),"state",{text:null,value:null,answer_text:null,answer:null,selected:null,count:0,score:0,answered:[]}),Ie(Te(n),"handleClick",(function(e){var t=n.state,r=t.value,o=t.answer_id;n.setState({selected:e}),r===e?(n.setState({answer:"Correct"}),n.increment(!0),re.event({category:"times-boris-bot",action:"".concat(o," - correct")})):(n.setState({answer:"Incorrect"}),n.increment(),re.event({category:"times-boris-bot",action:"".concat(o," - incorrect")}))})),Ie(Te(n),"getRandomText",(function(){var e=n.state.answered,t=e[e.length-1];0!==e.length&&(Oe.splice(t,1),re.event({category:"times-boris-bot",action:"".concat(e.length)}));var r=Math.floor(Math.random()*Oe.length),o=Oe[r];n.setState({text:o.text,value:o.value,answer_text:o.answer_text,answer:null,selected:null,answered:e.concat(r),answer_id:o.id})})),Ie(Te(n),"increment",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];n.setState((function(e){return{count:e.count+1}})),e&&n.setState((function(e){return{score:e.score+1}}))})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ce(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.getRandomText(),re.event({category:"times-boris-bot",action:"pageview"})}},{key:"render",value:function(){var e=this,t=this.state,n=t.text,r=t.answer,o=t.count,i=t.score,s=t.selected,c=t.answer_text,l=t.answered;return a.a.createElement(ge,null,a.a.createElement(be,null,a.a.createElement(se.a,{label:"Interactive",standfirst:"Decide if the following are genuine quotes from Boris Johnson’s Telegraph articles or generated by our robot"},"Who said it: Boris or our Bot?"),a.a.createElement("div",{className:"quotes"},a.a.createElement("img",{src:"http://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/quotes.png",alt:"Quote marks"})),a.a.createElement("h4",null,n),a.a.createElement("h5",{className:"".concat(r," ").concat(r?"":"hidden")},c),a.a.createElement(ye,null,a.a.createElement("button",{onClick:function(){return e.handleClick("Boris")},disabled:r&&!0},a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Correct.png",alt:"Boris Johnson Correct",className:"".concat("Boris"===s&&"Correct"===r?"":"hidden")}),a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Incorrect.png",alt:"Boris Johnson Incorrect",className:"".concat("Boris"===s&&"Incorrect"===r?"":"hidden")}),a.a.createElement(ve,{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris.png",id:"Boris",alt:"Boris Johnson",hover:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Hover.png",className:"".concat("Boris"===s&&r?"hidden":r?"unhoverable":"")}),"BORIS"),a.a.createElement("div",{className:"results"},r?a.a.createElement(a.a.Fragment,null,"Correct"===r?a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/TICK.svg",alt:"Tick"}):a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/CROSS.svg",alt:"Cross"}),a.a.createElement("h2",null,i,"/",o)):a.a.createElement(a.a.Fragment,null,a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/OR.svg"}),a.a.createElement("h2",null,i,"/",o))),a.a.createElement("button",{onClick:function(){return e.handleClick("Bot")},disabled:r&&!0},a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Correct.png",alt:"Boris Bot Correct",className:"".concat("Bot"===s&&"Correct"===r?"":"hidden")}),a.a.createElement("img",{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Incorrect.png",alt:"Boris Bot Incorrect",className:"".concat("Bot"===s&&"Incorrect"===r?"":"hidden")}),a.a.createElement(ve,{src:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot.png",alt:"Boris Bot",className:"".concat("Bot"===s&&r?"hidden":r?"unhoverable":""),hover:"https://s3-eu-west-1.amazonaws.com/nuk-tnl-editorial-prod-staticassets/2019/boris-bot/Boris-Bot-Hover.png"}),"BOT")),a.a.createElement(we,null,a.a.createElement("button",{className:r&&50!==l.length?"":"hidden",onClick:function(){return e.getRandomText()}},"PLAY AGAIN"))))}}])&&Se(n.prototype,r),o&&Se(n,o),t}(a.a.Component);ae()(Be,"times-boris-bot")}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,